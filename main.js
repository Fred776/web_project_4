(()=>{"use strict";var e={574:(e,t,n)=>{e.exports=n.p+"8a09f7f9258bd62b9cd6.jpg"},826:(e,t,n)=>{e.exports=n.p+"9d6c7e0ed33299abd137.jpg"},743:(e,t,n)=>{e.exports=n.p+"cf078dec825763c43be5.jpg"},314:(e,t,n)=>{e.exports=n.p+"0d6077a698516cb56e32.jpg"},663:(e,t,n)=>{e.exports=n.p+"9cb3ff28a234dc301599.jpg"},586:(e,t,n)=>{e.exports=n.p+"9fff16883c6ddf36d511.jpg"},827:(e,t,n)=>{e.exports=n.p+"3755f99ca093e6e21308.svg"},502:(e,t,n)=>{e.exports=n.p+"07e376f74a293059a328.jpg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.p="",(()=>{var e=[{name:"Everglade National Park",link:n(574)},{name:"Navajo Tribal Park",link:n(314)},{name:"Golden Gate Bridge",link:n(826)},{name:"Route 66",link:n(663)},{name:"Yellowstone National Park",link:n(586)},{name:"Grand Canyon",link:n(743)}],t=document.querySelector(".modal__form_type_edit"),r=document.querySelector(".modal__form_type_add"),o=document.querySelector(".places__list"),i=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),u=document.querySelector(".modal__input_content_name"),l=document.querySelector(".modal__input_content_profession"),c={_inputSelector:".modal__input",_submitButtonSelector:".modal__save-button",_inputErrorClass:"modal__input-error",_errorClass:"modal__input-error_active",_inactiveButtonClass:"modal__save-button_inactive"},s=document.querySelector(".modal__image"),f=document.querySelector(".modal__caption"),p=document.querySelector(".header__logo"),_=document.querySelector(".profile__image");function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),m(this,"_handleEscUp",(function(e){e.preventDefault(),"Escape"===e.key&&n.close()})),m(this,"_handleClick",(function(e){(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&n.close()})),this._popupElement=document.querySelector(".".concat(t)),this._handleEscUp=this._handleEscUp.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("modal_open"),document.addEventListener("keyup",this._handleEscUp),this.setEventListeners()}},{key:"close",value:function(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keyup",this._handleEscUp),this._popupElement.removeEventListener("click",this._handleClick)}},{key:"setEventListeners",value:function(){this._popupElement.addEventListener("click",this._handleClick)}}])&&d(t.prototype,n),e}();function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return(g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(){return v(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"open",value:function(e){var t=e.link,n=e.name;this._popupElement.querySelector(".modal__caption").textContent=n;var r=this._popupElement.querySelector(".modal__image");r.src=t,r.alt="".concat(n),g(S(a.prototype),"open",this).call(this)}}])&&b(t.prototype,n),a}(h);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n){var r=t.item,o=t.handleCardClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=r.name,this._link=r.link,this._handleCardClick=o,this._cardSelector=n}var t,n;return t=e,(n=[{key:"_handleLikeButton",value:function(){this._cardLikeButton.classList.toggle("card__like-button_active")}},{key:"_handleDeleteCard",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListeners",value:function(){var e=this;this._cardLikeButton=this._element.querySelector(".card__like-button"),this._cardDeleteButton=this._element.querySelector(".card__delete-button"),this._cardLikeButton.addEventListener("click",(function(){return e._handleLikeButton()})),this._cardDeleteButton.addEventListener("click",(function(){return e._handleDeleteCard()}))}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".card__title").textContent=this._name,this._image=this._element.querySelector(".card__image"),this._image.style.backgroundImage="url(".concat(this._link,")"),this._setEventListeners(),this._handleCardClick(),this._element}}])&&C(t.prototype,n),e}();function L(){var e=this;this._image.addEventListener("click",(function(t){t.preventDefault,new w("modal_type_image-preview").open(e._link,e._name),s.src=e._link,s.alt=e._name,f.textContent=e._name}))}function j(e){return new O({item:e,handleCardClick:L},".card__template").generateCard()}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(){this._renderedItems.forEach(this._renderer)}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&B(t.prototype,n),e}();function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t,n){return(I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function A(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?T(e):t}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var U=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e,t){var n,r,o,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(e){e.preventDefault(),n._handleFormSubmit(n._getInputValues())},(o="_submitHandler")in(r=T(n=i.call(this,e)))?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,n._handleFormSubmit=t,n._popupForm=n._popupElement.querySelector(".modal__form"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputElements=Array.from(this._popupForm.elements),this._inputElements.forEach((function(t){e[t.name]=t.value})),e}},{key:"close",value:function(){this._popupForm.reset(),this._popupForm.removeEventListener("submit",this._submitHandler),I(V(a.prototype),"close",this).call(this)}},{key:"setEventListeners",value:function(){this._popupForm.addEventListener("submit",this._submitHandler),I(V(a.prototype),"setEventListeners",this).call(this)}}])&&x(t.prototype,n),a}(h);function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(t),this._profileProfession=document.querySelector(n)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,profession:this._profileProfession.textContent}}},{key:"setUserInfo",value:function(e){this._profileName.textContent=e.name,this._profileProfession.textContent=e.profession}}])&&D(t.prototype,n),e}();function N(e){return function(e){if(Array.isArray(e))return G(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return G(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?G(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function G(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var M=function(){function e(t,n){var r,o,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(e){i._form.querySelector("#"+e.id+"-error").textContent=e.validationMessage,e.classList.add(i._errorClass)},(r="_showInputError")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[r]=o,this._inputSelector=t._inputSelector,this._submitButtonSelector=t._submitButtonSelector,this._inputErrorClass=t._inputErrorClass,this._errorClass=t._errorClass,this._inactiveButtonClass=t._inactiveButtonClass,this._form=n}var t,n;return t=e,(n=[{key:"_hideInputError",value:function(e){this._form.querySelector("#"+e.id+"-error").textContent="",e.classList.remove(this._errorClass)}},{key:"_hasValidInputs",value:function(){if(this._inputElements.every((function(e){return e.validity.valid})))return!0}},{key:"_toggleButton",value:function(){this._hasValidInputs()?(this._submitButtonEl.disabled=!1,this._submitButtonEl.classList.remove(this._inactiveButtonClass)):(this._submitButtonEl.disabled=!0,this._submitButtonEl.classList.add(this._inactiveButtonClass))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButtonEl=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButton()}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}},{key:"removeValidationErrors",value:function(){var e=this;N(document.querySelectorAll(this._inputSelector)).forEach((function(t){t.classList.remove(e._errorClass)})),N(document.querySelectorAll(".modal__input-error")).forEach((function(e){e.textContent=""}))}},{key:"disableSubmitButton",value:function(){var e=this;N(document.querySelectorAll(this._submitButtonSelector)).forEach((function(t){t.disabled=!0,t.classList.add(e._inactiveButtonClass)}))}}])&&H(t.prototype,n),e}(),Y=n(827),$=n(502);p.src=Y,_.src=$;var z=new F(".profile__name",".profile__profession"),J=new U("modal_type_edit",(function(e){z.setUserInfo(e),J.close()})),K=new U("modal_type_add",(function(e){X.addItem(j(e)),K.close()}));i.addEventListener("click",(function(){J.open(),J.setEventListeners(),u.value=z.getUserInfo().name,l.value=z.getUserInfo().profession,Q.removeValidationErrors(),Q.disableSubmitButton()})),a.addEventListener("click",(function(){K.open(),K.setEventListeners(),W.removeValidationErrors(),W.disableSubmitButton()}));var Q=new M(c,t),W=new M(c,r);Q.enableValidation(),W.enableValidation();var X=new q({items:e,renderer:function(e){X.addItem(j(e))}},o);X.renderItems()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OUNVLEVBQXFCK0UsTUFBUWlDLEVBQVNNLGNBQWMvQixXQUNwRGdDLEVBQWtCQyx5QkFDbEJELEVBQWtCRSx5QkFHdEIzSCxFQUFjMkIsaUJBQWlCLFNBQVMsV0FDcEMwRixFQUFhM0QsT0FDYjJELEVBQWF6RixvQkFDYmdHLEVBQWlCRix5QkFDakJFLEVBQWlCRCx5QkFLckIsSUFBTUYsRUFBb0IsSUFBSTlCLEVBQWN4RixFQUFjVCxHQUNwRGtJLEVBQW1CLElBQUlqQyxFQUFjeEYsRUFBY04sR0FFekQ0SCxFQUFrQkksbUJBQ2xCRCxFQUFpQkMsbUJBSWpCLElBQU1QLEVBQWdCLElBQUl6RCxFQUFRLENBQzlCQyxNQUFPdkUsRUFDUHdFLFNBQVUsU0FBQ3hCLEdBQ1ArRSxFQUFjQyxRQUFRNUQsRUFBV3BCLE1BRXRDekMsR0FFSHdILEVBQWNRLGUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3BvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9wb3B1cC13aXRoLWltYWdlLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9jYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL3BvcHVwLXdpdGgtZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvdXNlci1pbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9mb3JtLXZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3BhZ2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsImltcG9ydCBjYXJkRXZlcmdsYWRlUGFyayBmcm9tIFwiLi4vaW1hZ2VzL2NhcmRfX2V2ZXJnbGFkZS5qcGdcIjtcclxuaW1wb3J0IGNhcmROYXZham9QYXJrIGZyb20gXCIuLi9pbWFnZXMvY2FyZF9fbmF2YWpvcGFyay5qcGdcIjtcclxuaW1wb3J0IGNhcmRHb2xkZW5HYXRlIGZyb20gXCIuLi9pbWFnZXMvY2FyZF9fZ29sZGVuZ2F0ZS5qcGdcIjtcclxuaW1wb3J0IGNhcmRSb3V0ZTY2IGZyb20gXCIuLi9pbWFnZXMvY2FyZF9fcm91dGU2Ni5qcGdcIjtcclxuaW1wb3J0IGNhcmRZZWxsb3dzdG9uZVBhcmsgZnJvbSBcIi4uL2ltYWdlcy9jYXJkX195ZWxsb3dzdG9uZS5qcGdcIjtcclxuaW1wb3J0IGNhcmRHcmFuZENhbnlvbiBmcm9tIFwiLi4vaW1hZ2VzL2NhcmRfX2dyYW5kY2FueW9uLmpwZ1wiO1xyXG5cclxuY29uc3QgaW5pdGlhbENhcmRzID0gWyBcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkV2ZXJnbGFkZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgICAgICAgbGluazogY2FyZEV2ZXJnbGFkZVBhcmtcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogXCJOYXZham8gVHJpYmFsIFBhcmtcIixcclxuICAgICAgICBsaW5rOiBjYXJkTmF2YWpvUGFya1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIkdvbGRlbiBHYXRlIEJyaWRnZVwiLFxyXG4gICAgICAgIGxpbms6IGNhcmRHb2xkZW5HYXRlXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiUm91dGUgNjZcIixcclxuICAgICAgICBsaW5rOiBjYXJkUm91dGU2NlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiBcIlllbGxvd3N0b25lIE5hdGlvbmFsIFBhcmtcIixcclxuICAgICAgICBsaW5rOiBjYXJkWWVsbG93c3RvbmVQYXJrXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6IFwiR3JhbmQgQ2FueW9uXCIsXHJcbiAgICAgICAgbGluazogY2FyZEdyYW5kQ2FueW9uXHJcbiAgICB9XHJcbl07XHJcblxyXG5cclxuICAgLy8gKioqIFdyYXBwZXJzICoqKlxyXG5jb25zdCBlZGl0TW9kYWxFbCA9IFwibW9kYWxfdHlwZV9lZGl0XCI7XHJcbmNvbnN0IGVkaXRGb3JtTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtX3R5cGVfZWRpdFwiKTtcclxuY29uc3QgYWRkTW9kYWxFbCA9IFwibW9kYWxfdHlwZV9hZGRcIjtcclxuY29uc3QgYWRkRm9ybU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybV90eXBlX2FkZFwiKTtcclxuY29uc3QgcGxhY2VzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxhY2VzX19saXN0XCIpO1xyXG5cclxuXHJcbi8vICoqKiBCdXR0b25zICoqKlxyXG5jb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XHJcbmNvbnN0IGNhcmRBZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2FkZC1idXR0b25cIik7XHJcblxyXG5cclxuLy8gKioqIERPTSBlbGVtZW50cyAqKipcclxuY29uc3QgcHJvZmlsZU5hbWUgPSBcIi5wcm9maWxlX19uYW1lXCI7XHJcbmNvbnN0IHByb2ZpbGVQcm9mZXNzaW9uID0gXCIucHJvZmlsZV9fcHJvZmVzc2lvblwiO1xyXG5cclxuXHJcbi8vICoqKiBGb3JtIGRhdGEgKioqXHJcbmNvbnN0IG1vZGFsSW5wdXROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW5wdXRfY29udGVudF9uYW1lXCIpO1xyXG5jb25zdCBtb2RhbElucHV0UHJvZmVzc2lvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2lucHV0X2NvbnRlbnRfcHJvZmVzc2lvblwiKTtcclxuXHJcbmNvbnN0IGZvcm1TZXR0aW5ncyA9IHtcclxuICAgIF9pbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICAgIF9zdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX3NhdmUtYnV0dG9uXCIsXHJcbiAgICBfaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dC1lcnJvclwiLFxyXG4gICAgX2Vycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0LWVycm9yX2FjdGl2ZVwiLFxyXG4gICAgX2luYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3NhdmUtYnV0dG9uX2luYWN0aXZlXCJcclxufVxyXG5cclxuXHJcblxyXG4vLyAqKiogSW1hZ2UgUHJldmlldyBNb2RhbCAqKipcclxuY29uc3QgaW1hZ2VQcmV2aWV3TW9kYWxFbCA9IFwibW9kYWxfdHlwZV9pbWFnZS1wcmV2aWV3XCI7XHJcbmNvbnN0IGltYWdlUHJldmlld0VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2VcIik7XHJcbmNvbnN0IGNhcHRpb25QcmV2aWV3RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jYXB0aW9uXCIpO1xyXG5cclxuLy8gKioqIENhcmRzICoqKlxyXG5jb25zdCBjYXJkU2VsZWN0b3IgPSBcIi5jYXJkX190ZW1wbGF0ZVwiOyBcclxuXHJcbi8vICoqKiBQcm9maWxlICoqKlxyXG5jb25zdCBoZWFkZXJMb2dvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX2xvZ29cIik7XHJcbmNvbnN0IHByb2ZpbGVQaWN0dXJlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKTtcclxuXHJcblxyXG5leHBvcnQge2luaXRpYWxDYXJkcywgY2FyZFNlbGVjdG9yLCBwbGFjZXNMaXN0LCBwcm9maWxlRWRpdEJ1dHRvbiwgY2FyZEFkZEJ1dHRvbiwgZWRpdE1vZGFsRWwsIGVkaXRGb3JtTW9kYWwsIGFkZE1vZGFsRWwsXHJcbiAgICAgICBhZGRGb3JtTW9kYWwsIHByb2ZpbGVOYW1lLCBwcm9maWxlUHJvZmVzc2lvbiwgaW1hZ2VQcmV2aWV3RWwsIGltYWdlUHJldmlld01vZGFsRWwsIGNhcHRpb25QcmV2aWV3RWwsIG1vZGFsSW5wdXROYW1lLFxyXG4gICAgICAgbW9kYWxJbnB1dFByb2Zlc3Npb24sIGZvcm1TZXR0aW5ncywgaGVhZGVyTG9nbywgcHJvZmlsZVBpY3R1cmV9XHJcblxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7cG9wdXBTZWxlY3Rvcn1gKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVFc2NVcCA9IHRoaXMuX2hhbmRsZUVzY1VwLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9oYW5kbGVFc2NVcCk7XHJcbiAgICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5cIik7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUVzY1VwKTtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2hhbmRsZUNsaWNrKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgX2hhbmRsZUVzY1VwID0gKGV2dCkgPT4ge1xyXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyBcclxuICAgICAgICBpZihldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9oYW5kbGVDbGljayA9IChldnQpID0+IHtcclxuICAgICAgICBpZigoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykpIHx8IChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWxfX2Nsb3NlLWJ1dHRvbicpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2xpY2spO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL3BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIG9wZW4oe2xpbmssIG5hbWV9KSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2FwdGlvbicpLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsX19pbWFnZScpO1xyXG4gICAgICAgIGltYWdlRWxlbWVudC5zcmMgPSBsaW5rO1xyXG4gICAgICAgIGltYWdlRWxlbWVudC5hbHQgPSBgJHtuYW1lfWA7XHJcbiAgICAgICAgc3VwZXIub3BlbigpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gICAgY29uc3RydWN0b3Ioe2l0ZW0sIGhhbmRsZUNhcmRDbGlja30sIGNhcmRTZWxlY3Rvcil7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGl0ZW0ubmFtZTtcclxuICAgICAgICB0aGlzLl9saW5rID0gaXRlbS5saW5rO1xyXG5cclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICAgICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVMaWtlQnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZURlbGV0ZUNhcmQoKSB7XHJcbiAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpOyBcclxuICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9jYXJkTGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgICAgICB0aGlzLl9jYXJkRGVsZXRlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIik7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uKCkpO1xyXG4gICAgICAgIHRoaXMuX2NhcmREZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuX2hhbmRsZURlbGV0ZUNhcmQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcikuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIikuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpXHJcbiAgICAgICAgdGhpcy5faW1hZ2Uuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke3RoaXMuX2xpbmt9KWA7XHJcblxyXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsImltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9wb3B1cC13aXRoLWltYWdlLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL2NhcmQuanNcIjtcclxuaW1wb3J0IHtpbWFnZVByZXZpZXdNb2RhbEVsLCBpbWFnZVByZXZpZXdFbCwgY2FwdGlvblByZXZpZXdFbCwgY2FyZFNlbGVjdG9yfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGljaygpIHtcclxuICAgIHRoaXMuX2ltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0O1xyXG4gICAgICAgIGNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoaW1hZ2VQcmV2aWV3TW9kYWxFbClcclxuICAgICAgICBpbWFnZVBvcHVwLm9wZW4odGhpcy5fbGluaywgdGhpcy5fbmFtZSk7XHJcbiAgICAgICAgaW1hZ2VQcmV2aWV3RWwuc3JjPSB0aGlzLl9saW5rO1xyXG4gICAgICAgIGltYWdlUHJldmlld0VsLmFsdD0gdGhpcy5fbmFtZTtcclxuICAgICAgICBjYXB0aW9uUHJldmlld0VsLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJJdGVtKGl0ZW0pIHtcclxuICAgIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZCh7aXRlbSwgaGFuZGxlQ2FyZENsaWNrfSwgY2FyZFNlbGVjdG9yKTtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICAgIHJldHVybiBjYXJkRWxlbWVudDtcclxufVxyXG5cclxuZXhwb3J0IHtoYW5kbGVDYXJkQ2xpY2ssIHJlbmRlckl0ZW19OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3Ioe2l0ZW1zLCByZW5kZXJlcn0sIGNhcmRTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVkSXRlbXMgPSBpdGVtcztcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJJdGVtcygpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlZEl0ZW1zLmZvckVhY2godGhpcy5fcmVuZGVyZXIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vcG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCBmb3JtVmFsdWVzID0ge307XHJcblxyXG4gICAgICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBBcnJheS5mcm9tKHRoaXMuX3BvcHVwRm9ybS5lbGVtZW50cyk7XHJcbiAgICAgICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBmb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1WYWx1ZXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX3N1Ym1pdEhhbmRsZXIpXHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBfc3VibWl0SGFuZGxlciA9IChldnQpID0+IHtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsgXHJcbiAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTsgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX3N1Ym1pdEhhbmRsZXIpO1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3IocHJvZmlsZU5hbWUsIHByb2ZpbGVQcm9mZXNzaW9uKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb2ZpbGVOYW1lKTtcclxuICAgICAgICB0aGlzLl9wcm9maWxlUHJvZmVzc2lvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZVByb2Zlc3Npb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICBwcm9mZXNzaW9uOiB0aGlzLl9wcm9maWxlUHJvZmVzc2lvbi50ZXh0Q29udGVudFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VySW5mbyhkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZVByb2Zlc3Npb24udGV4dENvbnRlbnQgPSBkYXRhLnByb2Zlc3Npb247XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBzZXR0aW5ncy5faW5wdXRTZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHNldHRpbmdzLl9zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5faW5wdXRFcnJvckNsYXNzO1xyXG4gICAgICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5fZXJyb3JDbGFzcztcclxuICAgICAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuX2luYWN0aXZlQnV0dG9uQ2xhc3M7XHJcblxyXG4gICAgICAgIHRoaXMuX2Zvcm0gPSBmb3JtRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yU3BhbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcIiNcIiArIGlucHV0RWwuaWQgKyBcIi1lcnJvclwiKTtcclxuICAgICAgICBlcnJvclNwYW4udGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBfc2hvd0lucHV0RXJyb3IgPSAoaW5wdXRFbCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9yU3BhbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcIiNcIiArIGlucHV0RWwuaWQgKyBcIi1lcnJvclwiKTtcclxuICAgICAgICBlcnJvclNwYW4udGV4dENvbnRlbnQgPSBpbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBfaGFzVmFsaWRJbnB1dHMoKXtcclxuICAgICAgICBpZih0aGlzLl9pbnB1dEVsZW1lbnRzLmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF90b2dnbGVCdXR0b24oKSB7XHJcbiAgICAgICAgaWYodGhpcy5faGFzVmFsaWRJbnB1dHMoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25FbC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25FbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbkVsLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uRWwuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xyXG4gICAgICAgIGlmKGlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcikpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbkVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWwpID0+IHsgXHJcbiAgICAgICAgICAgIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpOyBcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVWYWxpZGF0aW9uRXJyb3JzKCkge1xyXG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XHJcbiAgICAgICAgaW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgICAgICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTsgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXQtZXJyb3JcIildO1xyXG4gICAgICAgIGVycm9yRWxlbWVudHMuZm9yRWFjaCgoZXJyb3JFbCkgPT4ge1xyXG4gICAgICAgICAgICBlcnJvckVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNhYmxlU3VibWl0QnV0dG9uKCkge1xyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbkVsZW1lbnRzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpXTtcclxuICAgICAgICBzdWJtaXRCdXR0b25FbGVtZW50cy5mb3JFYWNoKChzdWJtaXRCdXR0b25FbCkgPT4ge1xyXG4gICAgICAgICAgICBzdWJtaXRCdXR0b25FbC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbkVsLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHtpbml0aWFsQ2FyZHMsIHBsYWNlc0xpc3QsIGVkaXRNb2RhbEVsLCBlZGl0Rm9ybU1vZGFsLFxyXG4gICAgICAgYWRkTW9kYWxFbCwgYWRkRm9ybU1vZGFsLCBwcm9maWxlRWRpdEJ1dHRvbiwgY2FyZEFkZEJ1dHRvbiwgcHJvZmlsZU5hbWUsXHJcbiAgICAgICBwcm9maWxlUHJvZmVzc2lvbiwgbW9kYWxJbnB1dE5hbWUsIG1vZGFsSW5wdXRQcm9mZXNzaW9uLCBmb3JtU2V0dGluZ3MsXHJcbiAgICAgICBoZWFkZXJMb2dvLCBwcm9maWxlUGljdHVyZX0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQge3JlbmRlckl0ZW19IGZyb20gXCIuLi91dGlscy91dGlscy5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL3BvcHVwLXdpdGgtZm9ybS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvdXNlci1pbmZvLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL2Zvcm0tdmFsaWRhdG9yLmpzXCI7XHJcblxyXG5pbXBvcnQgaGVhZGVySW1hZ2UgZnJvbSBcIi4uL2ltYWdlcy9oZWFkZXJfX2xvZ28uc3ZnXCI7XHJcbmltcG9ydCBwcm9maWxlSW1hZ2UgZnJvbSBcIi4uL2ltYWdlcy9wcm9maWxlX19pbWFnZS5qcGdcIjtcclxuXHJcblxyXG4vLyAqKiogUHJvZmlsZSAqKipcclxuaGVhZGVyTG9nby5zcmMgPSBoZWFkZXJJbWFnZTtcclxucHJvZmlsZVBpY3R1cmUuc3JjID0gcHJvZmlsZUltYWdlO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8ocHJvZmlsZU5hbWUsIHByb2ZpbGVQcm9mZXNzaW9uKTtcclxuXHJcblxyXG4vLyAqKiogRm9ybXMgKioqXHJcbmNvbnN0IGVkaXRGb3JtUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShlZGl0TW9kYWxFbCwgKGRhdGEpID0+IHtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKGRhdGEpO1xyXG4gICAgZWRpdEZvcm1Qb3B1cC5jbG9zZSgpO1xyXG59KTtcclxuXHJcbmNvbnN0IGFkZEZvcm1Qb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKGFkZE1vZGFsRWwsIChpdGVtKSA9PiB7XHJcbiAgICAgICAgb3JpZ2luYWxDYXJkcy5hZGRJdGVtKHJlbmRlckl0ZW0oaXRlbSkpO1xyXG4gICAgICAgIGFkZEZvcm1Qb3B1cC5jbG9zZSgpO1xyXG59KTtcclxuXHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBlZGl0Rm9ybVBvcHVwLm9wZW4oKTtcclxuICAgIGVkaXRGb3JtUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIG1vZGFsSW5wdXROYW1lLnZhbHVlID0gdXNlckluZm8uZ2V0VXNlckluZm8oKS5uYW1lO1xyXG4gICAgbW9kYWxJbnB1dFByb2Zlc3Npb24udmFsdWUgPSB1c2VySW5mby5nZXRVc2VySW5mbygpLnByb2Zlc3Npb247XHJcbiAgICBlZGl0Rm9ybVZhbGlkYXRvci5yZW1vdmVWYWxpZGF0aW9uRXJyb3JzKCk7XHJcbiAgICBlZGl0Rm9ybVZhbGlkYXRvci5kaXNhYmxlU3VibWl0QnV0dG9uKCk7XHJcbn0pO1xyXG5cclxuY2FyZEFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgYWRkRm9ybVBvcHVwLm9wZW4oKTtcclxuICAgIGFkZEZvcm1Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgYWRkRm9ybVZhbGlkYXRvci5yZW1vdmVWYWxpZGF0aW9uRXJyb3JzKCk7XHJcbiAgICBhZGRGb3JtVmFsaWRhdG9yLmRpc2FibGVTdWJtaXRCdXR0b24oKTtcclxufSk7XHJcblxyXG5cclxuLy8gKioqIEZvcm1WYWxpZGF0b3IgKioqIFxyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1TZXR0aW5ncywgZWRpdEZvcm1Nb2RhbCk7XHJcbmNvbnN0IGFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtU2V0dGluZ3MsIGFkZEZvcm1Nb2RhbCk7XHJcblxyXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuXHJcbi8vICoqKiBPcmlnaW5hbCBDYXJkcyAqKipcclxuY29uc3Qgb3JpZ2luYWxDYXJkcyA9IG5ldyBTZWN0aW9uKHtcclxuICAgIGl0ZW1zOiBpbml0aWFsQ2FyZHMsIFxyXG4gICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgICAgb3JpZ2luYWxDYXJkcy5hZGRJdGVtKHJlbmRlckl0ZW0oaXRlbSkpO1xyXG4gICAgfVxyXG59LCBwbGFjZXNMaXN0KTtcclxuXHJcbm9yaWdpbmFsQ2FyZHMucmVuZGVySXRlbXMoKTsgIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicCIsImluaXRpYWxDYXJkcyIsIm5hbWUiLCJsaW5rIiwiZWRpdEZvcm1Nb2RhbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEZvcm1Nb2RhbCIsInBsYWNlc0xpc3QiLCJwcm9maWxlRWRpdEJ1dHRvbiIsImNhcmRBZGRCdXR0b24iLCJtb2RhbElucHV0TmFtZSIsIm1vZGFsSW5wdXRQcm9mZXNzaW9uIiwiZm9ybVNldHRpbmdzIiwiX2lucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImltYWdlUHJldmlld0VsIiwiY2FwdGlvblByZXZpZXdFbCIsImhlYWRlckxvZ28iLCJwcm9maWxlUGljdHVyZSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwia2V5IiwiY2xvc2UiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInRoaXMiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY1VwIiwiYmluZCIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRFdmVudExpc3RlbmVycyIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlQ2xpY2siLCJQb3B1cFdpdGhJbWFnZSIsInRleHRDb250ZW50IiwiaW1hZ2VFbGVtZW50Iiwic3JjIiwiYWx0IiwiQ2FyZCIsImNhcmRTZWxlY3RvciIsIml0ZW0iLCJoYW5kbGVDYXJkQ2xpY2siLCJfbmFtZSIsIl9saW5rIiwiX2hhbmRsZUNhcmRDbGljayIsIl9jYXJkU2VsZWN0b3IiLCJfY2FyZExpa2VCdXR0b24iLCJ0b2dnbGUiLCJfZWxlbWVudCIsIl9jYXJkRGVsZXRlQnV0dG9uIiwiX2hhbmRsZUxpa2VCdXR0b24iLCJfaGFuZGxlRGVsZXRlQ2FyZCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfZ2V0VGVtcGxhdGUiLCJfaW1hZ2UiLCJzdHlsZSIsImJhY2tncm91bmRJbWFnZSIsIl9zZXRFdmVudExpc3RlbmVycyIsIm9wZW4iLCJyZW5kZXJJdGVtIiwiZ2VuZXJhdGVDYXJkIiwiU2VjdGlvbiIsIml0ZW1zIiwicmVuZGVyZXIiLCJfcmVuZGVyZWRJdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJmb3JFYWNoIiwiZWxlbWVudCIsInByZXBlbmQiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2dldElucHV0VmFsdWVzIiwiX3BvcHVwRm9ybSIsImZvcm1WYWx1ZXMiLCJfaW5wdXRFbGVtZW50cyIsIkFycmF5IiwiZnJvbSIsImVsZW1lbnRzIiwiaW5wdXQiLCJ2YWx1ZSIsInJlc2V0IiwiX3N1Ym1pdEhhbmRsZXIiLCJVc2VySW5mbyIsInByb2ZpbGVOYW1lIiwicHJvZmlsZVByb2Zlc3Npb24iLCJfcHJvZmlsZU5hbWUiLCJfcHJvZmlsZVByb2Zlc3Npb24iLCJwcm9mZXNzaW9uIiwiZGF0YSIsIkZvcm1WYWxpZGF0b3IiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiaW5wdXRFbCIsIl9mb3JtIiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImV2ZXJ5IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNWYWxpZElucHV0cyIsIl9zdWJtaXRCdXR0b25FbCIsImRpc2FibGVkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwicXVlcnlTZWxlY3RvckFsbCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfdG9nZ2xlQnV0dG9uIiwiZSIsImVycm9yRWwiLCJzdWJtaXRCdXR0b25FbCIsImhlYWRlckltYWdlIiwicHJvZmlsZUltYWdlIiwidXNlckluZm8iLCJlZGl0Rm9ybVBvcHVwIiwic2V0VXNlckluZm8iLCJhZGRGb3JtUG9wdXAiLCJvcmlnaW5hbENhcmRzIiwiYWRkSXRlbSIsImdldFVzZXJJbmZvIiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJyZW1vdmVWYWxpZGF0aW9uRXJyb3JzIiwiZGlzYWJsZVN1Ym1pdEJ1dHRvbiIsImFkZEZvcm1WYWxpZGF0b3IiLCJlbmFibGVWYWxpZGF0aW9uIiwicmVuZGVySXRlbXMiXSwic291cmNlUm9vdCI6IiJ9